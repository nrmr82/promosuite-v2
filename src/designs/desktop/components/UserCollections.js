import React, { useState, useEffect } from 'react';
import { 
  Search, 
  Grid, 
  List, 
  Calendar,
  Edit3,
  Trash2,
  Sparkles,
  Palette,
  FileText,
  Heart
} from 'lucide-react';
import templateService from '../services/templateService';
import flyerProService from '../services/flyerProService';
import { getCurrentUser, supabase } from '../utils/supabase';
import './UserCollections.css';

const UserCollections = ({ onEditTemplate, onEditFlyer, onClose }) => {
  const [activeTab, setActiveTab] = useState('templates');
  const [viewMode, setViewMode] = useState('grid');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterBy, setFilterBy] = useState('all');
  const [sortBy, setSortBy] = useState('recent');
  
  // Data states
  const [templates, setTemplates] = useState([]);
  const [flyers, setFlyers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [user, setUser] = useState(null);

  // Load user and data
  useEffect(() => {
    const loadUserAndData = async () => {
      try {
        setLoading(true);
        const currentUser = await getCurrentUser();
        if (!currentUser) {
          setError('Please log in to view your collections');
          return;
        }
        setUser(currentUser);
        
        // Load both templates and flyers
        await Promise.all([
          loadUserTemplates(currentUser.id),
          loadUserFlyers(currentUser.id)
        ]);
      } catch (error) {
        console.error('Error loading collections:', error);
        setError('Failed to load your collections');
      } finally {
        setLoading(false);
      }
    };

    loadUserAndData();
  }, []); // Empty dependency array is intentional - we only want to load once on mount

  // Load user's generated templates
  const loadUserTemplates = async (userId) => {
    try {
      // Get all templates where user_id matches or templates that are AI-generated by this user
      const { data, error } = await supabase
        .from('templates')
        .select(`
          *,
          template_categories (
            name,
            slug,
            color
          )
        `)
        .eq('user_id', userId)
        .eq('is_active', true)
        .order('created_at', { ascending: false });

      if (error) throw error;

      const processedTemplates = (data || []).map(template => ({
        ...template,
        type: 'template',
        isAIGenerated: template.template_data?.aiGenerated || false,
        generatedAt: template.template_data?.generatedAt || template.created_at,
        previewData: template.template_data || {},
        canDelete: template.user_id === userId // Add flag to indicate if user can delete
      }));

      console.log('Loaded user templates:', processedTemplates.length, 'templates');
      setTemplates(processedTemplates);
    } catch (error) {
      console.error('Error loading templates:', error);
    }
  };

  // Load user's generated flyers
  const loadUserFlyers = async (userId) => {
    try {
      const { flyers } = await flyerProService.getUserFlyers({
        orderBy: 'created_at',
        ascending: false
      });

      const processedFlyers = (flyers || []).map(flyer => ({
        ...flyer,
        type: 'flyer',
        isAIGenerated: flyer.flyer_data?.aiGenerated || false,
        generatedAt: flyer.flyer_data?.generatedAt || flyer.created_at,
        previewData: flyer.flyer_data || {}
      }));

      setFlyers(processedFlyers);
    } catch (error) {
      console.error('Error loading flyers:', error);
    }
  };

  // Handle item actions
  const handleEdit = (item) => {
    if (item.type === 'template' && onEditTemplate) {
      onEditTemplate(item);
    } else if (item.type === 'flyer' && onEditFlyer) {
      onEditFlyer(item);
    }
  };

  const handleDelete = async (item) => {
    console.log('Attempting to delete:', item.type, item.id, {
      canDelete: item.canDelete,
      userId: user?.id,
      itemUserId: item.user_id
    });
    
    if (!window.confirm(`Are you sure you want to delete this ${item.type}?`)) {
      return;
    }

    // Check if user has permission to delete this item
    if (item.type === 'template' && item.canDelete === false) {
      alert('You can only delete templates that you created.');
      return;
    }

    try {
      let deleteSuccessful = false;
      
      if (item.type === 'template') {
        console.log('Deleting template from database:', item.id);
        
        // Delete template
        const { data, error } = await supabase
          .from('templates')
          .delete()
          .eq('id', item.id)
          .eq('user_id', user.id)
          .select(); // Add select to see what was actually deleted
        
        console.log('Delete result:', { data, error });
        
        if (error) {
          throw error;
        }
        
        // Check if any rows were actually deleted
        if (!data || data.length === 0) {
          throw new Error('No template was deleted - you may not have permission to delete this template');
        }
        
        deleteSuccessful = true;
        console.log('Updating templates state, removing:', item.id);
        setTemplates(prev => {
          const filtered = prev.filter(t => t.id !== item.id);
          console.log('Templates after filter:', filtered.length, 'remaining');
          return filtered;
        });
      } else if (item.type === 'flyer') {
        console.log('Deleting flyer:', item.id);
        
        // Delete flyer
        const result = await flyerProService.deleteFlyer(item.id);
        console.log('Flyer delete result:', result);
        
        if (result.success) {
          deleteSuccessful = true;
          setFlyers(prev => prev.filter(f => f.id !== item.id));
        } else {
          throw new Error(result.message || 'Failed to delete flyer');
        }
      }
      
      if (deleteSuccessful) {
        console.log(`✅ ${item.type} deleted successfully:`, item.id);
        alert(`${item.type} deleted successfully!`);
      }
    } catch (error) {
      console.error('❌ Error deleting item:', error);
      alert(`Failed to delete ${item.type}: ${error.message}`);
    }
  };

  const handleToggleFavorite = async (item) => {
    try {
      if (item.type === 'template') {
        await templateService.toggleFavorite(user.id, item.id);
        // Reload templates to reflect changes
        await loadUserTemplates(user.id);
      } else if (item.type === 'flyer') {
        await flyerProService.toggleFavorite(item.id);
        // Reload flyers to reflect changes  
        await loadUserFlyers(user.id);
      }
    } catch (error) {
      console.error('Error toggling favorite:', error);
    }
  };

  // Filter and sort items
  const getFilteredItems = () => {
    const items = activeTab === 'templates' ? templates : flyers;
    
    let filtered = items.filter(item => {
      if (searchTerm && !item.name?.toLowerCase().includes(searchTerm.toLowerCase()) &&
          !item.title?.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      if (filterBy === 'ai' && !item.isAIGenerated) return false;
      if (filterBy === 'manual' && item.isAIGenerated) return false;
      if (filterBy === 'favorites' && !item.is_favorite) return false;
      
      return true;
    });

    // Sort items
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'recent':
          return new Date(b.generatedAt || b.created_at) - new Date(a.generatedAt || a.created_at);
        case 'oldest':
          return new Date(a.generatedAt || a.created_at) - new Date(b.generatedAt || b.created_at);
        case 'name':
          return (a.name || a.title || '').localeCompare(b.name || b.title || '');
        default:
          return 0;
      }
    });

    return filtered;
  };

  // Render item card
  const renderItemCard = (item) => {
    const isTemplate = item.type === 'template';
    const title = item.name || item.title || 'Untitled';
    const description = item.description || 'No description';
    const createdAt = new Date(item.generatedAt || item.created_at).toLocaleDateString();

    return (
      <div key={`${item.type}-${item.id}`} className="collection-item-card">
        <div className="item-preview">
          <div className="preview-placeholder">
            {isTemplate ? (
              <Palette size={24} className="preview-icon" />
            ) : (
              <FileText size={24} className="preview-icon" />
            )}
            {item.isAIGenerated && (
              <div className="ai-badge">
                <Sparkles size={12} />
                AI
              </div>
            )}
            {item.thumbnail_url && (
              <img 
                src={item.thumbnail_url} 
                alt={title}
                className="preview-image"
                onError={(e) => e.target.style.display = 'none'}
              />
            )}
          </div>
          
          <div className="item-actions">
            <button 
              className="action-btn"
              onClick={() => handleEdit(item)}
              title="Edit"
            >
              <Edit3 size={14} />
            </button>
            <button 
              className="action-btn"
              onClick={() => handleToggleFavorite(item)}
              title={item.is_favorite ? "Remove from favorites" : "Add to favorites"}
            >
              <Heart size={14} className={item.is_favorite ? 'favorited' : ''} />
            </button>
            {/* Only show delete button for items user can delete */}
            {(item.canDelete !== false && (item.type !== 'template' || item.user_id === user?.id)) && (
              <button 
                className="action-btn delete"
                onClick={() => handleDelete(item)}
                title="Delete"
              >
                <Trash2 size={14} />
              </button>
            )}
          </div>
        </div>

        <div className="item-info">
          <h4 className="item-title">{title}</h4>
          <p className="item-description">{description}</p>
          <div className="item-meta">
            <span className="meta-date">
              <Calendar size={12} />
              {createdAt}
            </span>
            <span className={`meta-type ${item.isAIGenerated ? 'ai' : 'manual'}`}>
              {item.isAIGenerated ? 'AI Generated' : 'Manual'}
            </span>
          </div>
        </div>
      </div>
    );
  };

  // Render list view
  const renderItemList = (item) => {
    const isTemplate = item.type === 'template';
    const title = item.name || item.title || 'Untitled';
    const createdAt = new Date(item.generatedAt || item.created_at).toLocaleDateString();

    return (
      <div key={`${item.type}-${item.id}`} className="collection-item-row">
        <div className="row-preview">
          {isTemplate ? (
            <Palette size={16} className="row-icon" />
          ) : (
            <FileText size={16} className="row-icon" />
          )}
        </div>
        
        <div className="row-info">
          <div className="row-title">
            {title}
            {item.isAIGenerated && (
              <span className="ai-badge-small">
                <Sparkles size={10} />
                AI
              </span>
            )}
          </div>
          <div className="row-description">{item.description || 'No description'}</div>
        </div>
        
        <div className="row-meta">
          <span className="row-date">{createdAt}</span>
          <span className={`row-type ${item.isAIGenerated ? 'ai' : 'manual'}`}>
            {item.isAIGenerated ? 'AI' : 'Manual'}
          </span>
        </div>
        
        <div className="row-actions">
          <button className="action-btn" onClick={() => handleEdit(item)}>
            <Edit3 size={14} />
          </button>
          <button 
            className="action-btn"
            onClick={() => handleToggleFavorite(item)}
          >
            <Heart size={14} className={item.is_favorite ? 'favorited' : ''} />
          </button>
          {/* Only show delete button for items user can delete */}
          {(item.canDelete !== false && (item.type !== 'template' || item.user_id === user?.id)) && (
            <button className="action-btn delete" onClick={() => handleDelete(item)}>
              <Trash2 size={14} />
            </button>
          )}
        </div>
      </div>
    );
  };

  if (loading) {
    return (
      <div className="collections-container">
        <div className="collections-loading">
          <div className="loading-spinner"></div>
          <p>Loading your collections...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="collections-container">
        <div className="collections-error">
          <h3>Error Loading Collections</h3>
          <p>{error}</p>
          <button onClick={onClose} className="btn-primary">
            Close
          </button>
        </div>
      </div>
    );
  }

  const filteredItems = getFilteredItems();
  const totalTemplates = templates.length;
  const totalFlyers = flyers.length;
  const aiTemplates = templates.filter(t => t.isAIGenerated).length;
  const aiFlyers = flyers.filter(f => f.isAIGenerated).length;

  return (
    <div className="collections-container">
      <div className="collections-header">
        <div className="header-left">
          <h2>My Collections</h2>
          <p>Manage your AI-generated and custom templates and flyers</p>
        </div>
        
        <div className="header-stats">
          <div className="stat-card">
            <Palette size={16} aria-hidden="true" />
            <div>
              <span className="stat-number">{totalTemplates}</span>
              <span className="stat-label">Templates</span>
              <span className="stat-detail">({aiTemplates} AI)</span>
            </div>
          </div>
          <div className="stat-card">
            <FileText size={16} aria-hidden="true" />
            <div>
              <span className="stat-number">{totalFlyers}</span>
              <span className="stat-label">Flyers</span>
              <span className="stat-detail">({aiFlyers} AI)</span>
            </div>
          </div>
        </div>
        
        <button onClick={onClose} className="close-btn">×</button>
      </div>

      <div className="collections-controls">
        <div className="tab-buttons">
          <button 
            className={`tab-btn ${activeTab === 'templates' ? 'active' : ''}`}
            onClick={() => setActiveTab('templates')}
          >
            <Palette size={16} />
            Templates ({totalTemplates})
          </button>
          <button 
            className={`tab-btn ${activeTab === 'flyers' ? 'active' : ''}`}
            onClick={() => setActiveTab('flyers')}
          >
            <FileText size={16} />
            Flyers ({totalFlyers})
          </button>
        </div>

        <div className="controls-right">
          <div className="search-box">
            <Search size={16} />
            <input
              type="text"
              placeholder="Search collections..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          
          <div className="filter-controls">
            <select 
              value={filterBy} 
              onChange={(e) => setFilterBy(e.target.value)}
              className="filter-select"
            >
              <option value="all">All Items</option>
              <option value="ai">AI Generated</option>
              <option value="manual">Manual</option>
              <option value="favorites">Favorites</option>
            </select>
            
            <select 
              value={sortBy} 
              onChange={(e) => setSortBy(e.target.value)}
              className="sort-select"
            >
              <option value="recent">Most Recent</option>
              <option value="oldest">Oldest First</option>
              <option value="name">Name (A-Z)</option>
            </select>
          </div>
          
          <div className="view-toggle">
            <button 
              className={`view-btn ${viewMode === 'grid' ? 'active' : ''}`}
              onClick={() => setViewMode('grid')}
              aria-label="Grid view"
            >
              <Grid size={16} />
            </button>
            <button 
              className={`view-btn ${viewMode === 'list' ? 'active' : ''}`}
              onClick={() => setViewMode('list')}
              aria-label="List view"
            >
              <List size={16} />
            </button>
          </div>
        </div>
      </div>

      <div className="collections-content">
        {filteredItems.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">
              {activeTab === 'templates' ? <Palette size={48} /> : <FileText size={48} />}
            </div>
            <h3>No {activeTab} found</h3>
            <p>
              {searchTerm || filterBy !== 'all' 
                ? `No ${activeTab} match your current filters.`
                : `You haven't created any ${activeTab} yet. Start by using our AI generators!`
              }
            </p>
          </div>
        ) : (
          <div className={`collections-grid ${viewMode}`}>
            {viewMode === 'grid' 
              ? filteredItems.map(renderItemCard)
              : filteredItems.map(renderItemList)
            }
          </div>
        )}
      </div>
    </div>
  );
};

export default UserCollections;
